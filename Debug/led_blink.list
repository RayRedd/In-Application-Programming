
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001720  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080018b8  080018b8  000118b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080018d0  080018d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080018e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b8c  2000000c  080018ec  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002b98  080018ec  00022b98  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008e22  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f75  00000000  00000000  00028e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003591  00000000  00000000  0002add3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b8  00000000  00000000  0002e368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000900  00000000  00000000  0002ea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000038c1  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002840  00000000  00000000  00032be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035421  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010e8  00000000  00000000  000354a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080018a0 	.word	0x080018a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080018a0 	.word	0x080018a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8aa 	bl	8000658 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 f8ca 	bl	80016f0 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000034 	.word	0x20000034

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfad      	iteet	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	bfb5      	itete	lt
 8000626:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db08      	blt.n	8000652 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000640:	0942      	lsrs	r2, r0, #5
 8000642:	2301      	movs	r3, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	fa03 f000 	lsl.w	r0, r3, r0
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_NVIC_EnableIRQ+0x18>)
 800064e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000684:	4770      	bx	lr

08000686 <HAL_SYSTICK_IRQHandler>:
{
 8000686:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000688:	f7ff fffc 	bl	8000684 <HAL_SYSTICK_Callback>
 800068c:	bd08      	pop	{r3, pc}

0800068e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800068e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000692:	2b02      	cmp	r3, #2
 8000694:	d003      	beq.n	800069e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800069a:	2001      	movs	r0, #1
 800069c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800069e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006a0:	2305      	movs	r3, #5
 80006a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006a6:	6813      	ldr	r3, [r2, #0]
 80006a8:	f023 0301 	bic.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006ae:	2000      	movs	r0, #0
}
 80006b0:	4770      	bx	lr
	...

080006b4 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006b4:	4909      	ldr	r1, [pc, #36]	; (80006dc <FLASH_Program_DoubleWord+0x28>)
{
 80006b6:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006b8:	690c      	ldr	r4, [r1, #16]
 80006ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80006be:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80006c0:	690c      	ldr	r4, [r1, #16]
 80006c2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80006c6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006c8:	690c      	ldr	r4, [r1, #16]
 80006ca:	f044 0401 	orr.w	r4, r4, #1
 80006ce:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80006d0:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80006d2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80006d6:	6043      	str	r3, [r0, #4]
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <FLASH_Program_Word+0x20>)
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	f042 0201 	orr.w	r2, r2, #1
 80006f8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80006fa:	6001      	str	r1, [r0, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023c00 	.word	0x40023c00

08000704 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <FLASH_Program_HalfWord+0x20>)
 8000706:	691a      	ldr	r2, [r3, #16]
 8000708:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800070c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000714:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	f042 0201 	orr.w	r2, r2, #1
 800071c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800071e:	8001      	strh	r1, [r0, #0]
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023c00 	.word	0x40023c00

08000728 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <FLASH_SetErrorCode+0x84>)
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	06d0      	lsls	r0, r2, #27
 800072e:	d506      	bpl.n	800073e <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000730:	491f      	ldr	r1, [pc, #124]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 8000732:	69ca      	ldr	r2, [r1, #28]
 8000734:	f042 0210 	orr.w	r2, r2, #16
 8000738:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800073a:	2210      	movs	r2, #16
 800073c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	0691      	lsls	r1, r2, #26
 8000742:	d506      	bpl.n	8000752 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000744:	491a      	ldr	r1, [pc, #104]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 8000746:	69ca      	ldr	r2, [r1, #28]
 8000748:	f042 0208 	orr.w	r2, r2, #8
 800074c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800074e:	2220      	movs	r2, #32
 8000750:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <FLASH_SetErrorCode+0x84>)
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	0652      	lsls	r2, r2, #25
 8000758:	d506      	bpl.n	8000768 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800075a:	4915      	ldr	r1, [pc, #84]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 800075c:	69ca      	ldr	r2, [r1, #28]
 800075e:	f042 0204 	orr.w	r2, r2, #4
 8000762:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000764:	2240      	movs	r2, #64	; 0x40
 8000766:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	0610      	lsls	r0, r2, #24
 800076c:	d506      	bpl.n	800077c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800076e:	4910      	ldr	r1, [pc, #64]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 8000770:	69ca      	ldr	r2, [r1, #28]
 8000772:	f042 0202 	orr.w	r2, r2, #2
 8000776:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <FLASH_SetErrorCode+0x84>)
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	05d1      	lsls	r1, r2, #23
 8000782:	d507      	bpl.n	8000794 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000784:	490a      	ldr	r1, [pc, #40]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 8000786:	69ca      	ldr	r2, [r1, #28]
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800078e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000792:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000794:	68da      	ldr	r2, [r3, #12]
 8000796:	0792      	lsls	r2, r2, #30
 8000798:	d506      	bpl.n	80007a8 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <FLASH_SetErrorCode+0x88>)
 800079c:	69ca      	ldr	r2, [r1, #28]
 800079e:	f042 0220 	orr.w	r2, r2, #32
 80007a2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80007a4:	2202      	movs	r2, #2
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023c00 	.word	0x40023c00
 80007b0:	20000038 	.word	0x20000038

080007b4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_FLASH_Unlock+0x1c>)
 80007b6:	691a      	ldr	r2, [r3, #16]
 80007b8:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80007ba:	bfbf      	itttt	lt
 80007bc:	4a05      	ldrlt	r2, [pc, #20]	; (80007d4 <HAL_FLASH_Unlock+0x20>)
 80007be:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80007c0:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80007c4:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007c6:	bfba      	itte	lt
 80007c8:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80007ca:	0fc0      	lsrlt	r0, r0, #31
 80007cc:	2000      	movge	r0, #0
}
 80007ce:	4770      	bx	lr
 80007d0:	40023c00 	.word	0x40023c00
 80007d4:	45670123 	.word	0x45670123

080007d8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_FLASH_Lock+0x10>)
 80007da:	6913      	ldr	r3, [r2, #16]
 80007dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e0:	6113      	str	r3, [r2, #16]
}
 80007e2:	2000      	movs	r0, #0
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023c00 	.word	0x40023c00

080007ec <FLASH_WaitForLastOperation>:
{ 
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80007f0:	4c12      	ldr	r4, [pc, #72]	; (800083c <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007f2:	2200      	movs	r2, #0
{ 
 80007f4:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007f6:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80007f8:	f7ff fec0 	bl	800057c <HAL_GetTick>
 80007fc:	4626      	mov	r6, r4
 80007fe:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000800:	68e3      	ldr	r3, [r4, #12]
 8000802:	03da      	lsls	r2, r3, #15
 8000804:	d40c      	bmi.n	8000820 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000806:	68e3      	ldr	r3, [r4, #12]
 8000808:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800080a:	bf44      	itt	mi
 800080c:	2301      	movmi	r3, #1
 800080e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000810:	68f0      	ldr	r0, [r6, #12]
 8000812:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000816:	d002      	beq.n	800081e <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8000818:	f7ff ff86 	bl	8000728 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800081c:	2001      	movs	r0, #1
}  
 800081e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000820:	1c69      	adds	r1, r5, #1
 8000822:	d0ed      	beq.n	8000800 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000824:	b90d      	cbnz	r5, 800082a <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000826:	2003      	movs	r0, #3
 8000828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800082a:	f7ff fea7 	bl	800057c <HAL_GetTick>
 800082e:	1bc0      	subs	r0, r0, r7
 8000830:	4285      	cmp	r5, r0
 8000832:	d2e5      	bcs.n	8000800 <FLASH_WaitForLastOperation+0x14>
 8000834:	e7f7      	b.n	8000826 <FLASH_WaitForLastOperation+0x3a>
 8000836:	bf00      	nop
 8000838:	20000038 	.word	0x20000038
 800083c:	40023c00 	.word	0x40023c00

08000840 <HAL_FLASH_Program>:
{
 8000840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000844:	4d20      	ldr	r5, [pc, #128]	; (80008c8 <HAL_FLASH_Program+0x88>)
{
 8000846:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000848:	7e2b      	ldrb	r3, [r5, #24]
 800084a:	2b01      	cmp	r3, #1
{
 800084c:	4607      	mov	r7, r0
 800084e:	460e      	mov	r6, r1
 8000850:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000852:	d035      	beq.n	80008c0 <HAL_FLASH_Program+0x80>
 8000854:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000856:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800085a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800085c:	f7ff ffc6 	bl	80007ec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000860:	b9b0      	cbnz	r0, 8000890 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000862:	b9cf      	cbnz	r7, 8000898 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_FLASH_Program+0x8c>)
 8000866:	691a      	ldr	r2, [r3, #16]
 8000868:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800086c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000872:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000874:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800087c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800087e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000882:	f7ff ffb3 	bl	80007ec <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_FLASH_Program+0x8c>)
 8000888:	6913      	ldr	r3, [r2, #16]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000890:	2300      	movs	r3, #0
 8000892:	762b      	strb	r3, [r5, #24]
  return status;
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000898:	2f01      	cmp	r7, #1
 800089a:	d104      	bne.n	80008a6 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800089c:	b2a1      	uxth	r1, r4
 800089e:	4630      	mov	r0, r6
 80008a0:	f7ff ff30 	bl	8000704 <FLASH_Program_HalfWord>
 80008a4:	e7eb      	b.n	800087e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80008a6:	2f02      	cmp	r7, #2
 80008a8:	d104      	bne.n	80008b4 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80008aa:	4621      	mov	r1, r4
 80008ac:	4630      	mov	r0, r6
 80008ae:	f7ff ff17 	bl	80006e0 <FLASH_Program_Word>
 80008b2:	e7e4      	b.n	800087e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80008b4:	4622      	mov	r2, r4
 80008b6:	4643      	mov	r3, r8
 80008b8:	4630      	mov	r0, r6
 80008ba:	f7ff fefb 	bl	80006b4 <FLASH_Program_DoubleWord>
 80008be:	e7de      	b.n	800087e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80008c0:	2002      	movs	r0, #2
}
 80008c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c6:	bf00      	nop
 80008c8:	20000038 	.word	0x20000038
 80008cc:	40023c00 	.word	0x40023c00

080008d0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80008d0:	b139      	cbz	r1, 80008e2 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80008d2:	2901      	cmp	r1, #1
 80008d4:	d01c      	beq.n	8000910 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80008d6:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80008d8:	bf0c      	ite	eq
 80008da:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80008de:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <FLASH_Erase_Sector+0x48>)
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008ea:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80008ec:	691a      	ldr	r2, [r3, #16]
 80008ee:	4311      	orrs	r1, r2
 80008f0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	f042 0202 	orr.w	r2, r2, #2
 8000900:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000904:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000906:	691a      	ldr	r2, [r3, #16]
 8000908:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000914:	e7e5      	b.n	80008e2 <FLASH_Erase_Sector+0x12>
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000920:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000ab4 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000928:	4a60      	ldr	r2, [pc, #384]	; (8000aac <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800092c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000930:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000934:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000938:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800093a:	42ac      	cmp	r4, r5
 800093c:	f040 80a6 	bne.w	8000a8c <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	684c      	ldr	r4, [r1, #4]
 8000942:	f024 0c10 	bic.w	ip, r4, #16
 8000946:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 800094a:	2e01      	cmp	r6, #1
 800094c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000950:	d812      	bhi.n	8000978 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000952:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000954:	2603      	movs	r6, #3
 8000956:	fa06 f60e 	lsl.w	r6, r6, lr
 800095a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095e:	68ce      	ldr	r6, [r1, #12]
 8000960:	fa06 f60e 	lsl.w	r6, r6, lr
 8000964:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000966:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000968:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800096a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800096e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000972:	409e      	lsls	r6, r3
 8000974:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000976:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000978:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800097a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000980:	43f6      	mvns	r6, r6
 8000982:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000986:	688f      	ldr	r7, [r1, #8]
 8000988:	fa07 f70e 	lsl.w	r7, r7, lr
 800098c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000990:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000994:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	d116      	bne.n	80009c6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000998:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800099c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009a4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009ac:	f04f 0c0f 	mov.w	ip, #15
 80009b0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009b4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b8:	690f      	ldr	r7, [r1, #16]
 80009ba:	fa07 f70b 	lsl.w	r7, r7, fp
 80009be:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009c2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009c6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ca:	f004 0703 	and.w	r7, r4, #3
 80009ce:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009d2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009d6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d8:	00e6      	lsls	r6, r4, #3
 80009da:	d557      	bpl.n	8000a8c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	f04f 0b00 	mov.w	fp, #0
 80009e0:	f8cd b00c 	str.w	fp, [sp, #12]
 80009e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e8:	4e31      	ldr	r6, [pc, #196]	; (8000ab0 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009ee:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009f2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009f6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009fa:	9703      	str	r7, [sp, #12]
 80009fc:	9f03      	ldr	r7, [sp, #12]
 80009fe:	f023 0703 	bic.w	r7, r3, #3
 8000a02:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a06:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a0a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a0e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a16:	f04f 0e0f 	mov.w	lr, #15
 8000a1a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a20:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a24:	d039      	beq.n	8000a9a <HAL_GPIO_Init+0x17e>
 8000a26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	d037      	beq.n	8000a9e <HAL_GPIO_Init+0x182>
 8000a2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a32:	42b0      	cmp	r0, r6
 8000a34:	d035      	beq.n	8000aa2 <HAL_GPIO_Init+0x186>
 8000a36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a3a:	42b0      	cmp	r0, r6
 8000a3c:	d033      	beq.n	8000aa6 <HAL_GPIO_Init+0x18a>
 8000a3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a42:	42b0      	cmp	r0, r6
 8000a44:	bf14      	ite	ne
 8000a46:	2607      	movne	r6, #7
 8000a48:	2604      	moveq	r6, #4
 8000a4a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a4e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a52:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a54:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a56:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	bf0c      	ite	eq
 8000a5e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a60:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a62:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	bf0c      	ite	eq
 8000a6c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a6e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a70:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a78:	bf0c      	ite	eq
 8000a7a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a7c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a7e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a82:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a84:	bf54      	ite	pl
 8000a86:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a88:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a8a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	2b10      	cmp	r3, #16
 8000a90:	f47f af4f 	bne.w	8000932 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a94:	b005      	add	sp, #20
 8000a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9a:	465e      	mov	r6, fp
 8000a9c:	e7d5      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000a9e:	2601      	movs	r6, #1
 8000aa0:	e7d3      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aa2:	2602      	movs	r6, #2
 8000aa4:	e7d1      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aa6:	2603      	movs	r6, #3
 8000aa8:	e7cf      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aaa:	bf00      	nop
 8000aac:	40013c00 	.word	0x40013c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab8:	b10a      	cbz	r2, 8000abe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aba:	6181      	str	r1, [r0, #24]
 8000abc:	4770      	bx	lr
 8000abe:	0409      	lsls	r1, r1, #16
 8000ac0:	e7fb      	b.n	8000aba <HAL_GPIO_WritePin+0x2>

08000ac2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ac2:	6943      	ldr	r3, [r0, #20]
 8000ac4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ac8:	bf08      	it	eq
 8000aca:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000acc:	6181      	str	r1, [r0, #24]
 8000ace:	4770      	bx	lr

08000ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	b908      	cbnz	r0, 8000adc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ad8:	2001      	movs	r0, #1
 8000ada:	e03f      	b.n	8000b5c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000adc:	6803      	ldr	r3, [r0, #0]
 8000ade:	07dd      	lsls	r5, r3, #31
 8000ae0:	d410      	bmi.n	8000b04 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	0798      	lsls	r0, r3, #30
 8000ae6:	d45a      	bmi.n	8000b9e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	071a      	lsls	r2, r3, #28
 8000aec:	f100 809c 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	075b      	lsls	r3, r3, #29
 8000af4:	f100 80ba 	bmi.w	8000c6c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af8:	69a0      	ldr	r0, [r4, #24]
 8000afa:	2800      	cmp	r0, #0
 8000afc:	f040 811b 	bne.w	8000d36 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b00:	2000      	movs	r0, #0
 8000b02:	e02b      	b.n	8000b5c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b04:	4ba4      	ldr	r3, [pc, #656]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	f002 020c 	and.w	r2, r2, #12
 8000b0c:	2a04      	cmp	r2, #4
 8000b0e:	d007      	beq.n	8000b20 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b16:	2a08      	cmp	r2, #8
 8000b18:	d10a      	bne.n	8000b30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	0259      	lsls	r1, r3, #9
 8000b1e:	d507      	bpl.n	8000b30 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	039a      	lsls	r2, r3, #14
 8000b26:	d5dc      	bpl.n	8000ae2 <HAL_RCC_OscConfig+0x12>
 8000b28:	6863      	ldr	r3, [r4, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1d9      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x12>
 8000b2e:	e7d3      	b.n	8000ad8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	4d99      	ldr	r5, [pc, #612]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b38:	d113      	bne.n	8000b62 <HAL_RCC_OscConfig+0x92>
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b42:	f7ff fd1b 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b46:	4d94      	ldr	r5, [pc, #592]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	039b      	lsls	r3, r3, #14
 8000b4e:	d4c8      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b50:	f7ff fd14 	bl	800057c <HAL_GetTick>
 8000b54:	1b80      	subs	r0, r0, r6
 8000b56:	2864      	cmp	r0, #100	; 0x64
 8000b58:	d9f7      	bls.n	8000b4a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000b5a:	2003      	movs	r0, #3
}
 8000b5c:	b002      	add	sp, #8
 8000b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b66:	d104      	bne.n	8000b72 <HAL_RCC_OscConfig+0xa2>
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6e:	602b      	str	r3, [r5, #0]
 8000b70:	e7e3      	b.n	8000b3a <HAL_RCC_OscConfig+0x6a>
 8000b72:	682a      	ldr	r2, [r5, #0]
 8000b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b78:	602a      	str	r2, [r5, #0]
 8000b7a:	682a      	ldr	r2, [r5, #0]
 8000b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b80:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1dd      	bne.n	8000b42 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000b86:	f7ff fcf9 	bl	800057c <HAL_GetTick>
 8000b8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	039f      	lsls	r7, r3, #14
 8000b90:	d5a7      	bpl.n	8000ae2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b92:	f7ff fcf3 	bl	800057c <HAL_GetTick>
 8000b96:	1b80      	subs	r0, r0, r6
 8000b98:	2864      	cmp	r0, #100	; 0x64
 8000b9a:	d9f7      	bls.n	8000b8c <HAL_RCC_OscConfig+0xbc>
 8000b9c:	e7dd      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b9e:	4b7e      	ldr	r3, [pc, #504]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	f012 0f0c 	tst.w	r2, #12
 8000ba6:	d007      	beq.n	8000bb8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bae:	2a08      	cmp	r2, #8
 8000bb0:	d111      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	025e      	lsls	r6, r3, #9
 8000bb6:	d40e      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb8:	4b77      	ldr	r3, [pc, #476]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	0795      	lsls	r5, r2, #30
 8000bbe:	d502      	bpl.n	8000bc6 <HAL_RCC_OscConfig+0xf6>
 8000bc0:	68e2      	ldr	r2, [r4, #12]
 8000bc2:	2a01      	cmp	r2, #1
 8000bc4:	d188      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	6921      	ldr	r1, [r4, #16]
 8000bca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000bce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000bd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd4:	e788      	b.n	8000ae8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bd6:	68e2      	ldr	r2, [r4, #12]
 8000bd8:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <HAL_RCC_OscConfig+0x2cc>)
 8000bda:	b1b2      	cbz	r2, 8000c0a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000be0:	f7ff fccc 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be4:	4d6c      	ldr	r5, [pc, #432]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000be6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	0798      	lsls	r0, r3, #30
 8000bec:	d507      	bpl.n	8000bfe <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	6922      	ldr	r2, [r4, #16]
 8000bf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bfa:	602b      	str	r3, [r5, #0]
 8000bfc:	e774      	b.n	8000ae8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fcbd 	bl	800057c <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	2802      	cmp	r0, #2
 8000c06:	d9ef      	bls.n	8000be8 <HAL_RCC_OscConfig+0x118>
 8000c08:	e7a7      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000c0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fcb6 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c10:	4d61      	ldr	r5, [pc, #388]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	0799      	lsls	r1, r3, #30
 8000c18:	f57f af66 	bpl.w	8000ae8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fcae 	bl	800057c <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x144>
 8000c26:	e798      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c28:	6962      	ldr	r2, [r4, #20]
 8000c2a:	4b5d      	ldr	r3, [pc, #372]	; (8000da0 <HAL_RCC_OscConfig+0x2d0>)
 8000c2c:	b17a      	cbz	r2, 8000c4e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c32:	f7ff fca3 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	4d58      	ldr	r5, [pc, #352]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c3c:	079f      	lsls	r7, r3, #30
 8000c3e:	f53f af57 	bmi.w	8000af0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c42:	f7ff fc9b 	bl	800057c <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d9f6      	bls.n	8000c3a <HAL_RCC_OscConfig+0x16a>
 8000c4c:	e785      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000c4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c50:	f7ff fc94 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c54:	4d50      	ldr	r5, [pc, #320]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c5a:	0798      	lsls	r0, r3, #30
 8000c5c:	f57f af48 	bpl.w	8000af0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c60:	f7ff fc8c 	bl	800057c <HAL_GetTick>
 8000c64:	1b80      	subs	r0, r0, r6
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9f6      	bls.n	8000c58 <HAL_RCC_OscConfig+0x188>
 8000c6a:	e776      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c70:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c74:	d128      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	9201      	str	r2, [sp, #4]
 8000c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c8a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8c:	4d45      	ldr	r5, [pc, #276]	; (8000da4 <HAL_RCC_OscConfig+0x2d4>)
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	05d9      	lsls	r1, r3, #23
 8000c92:	d51b      	bpl.n	8000ccc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c94:	68a3      	ldr	r3, [r4, #8]
 8000c96:	4d40      	ldr	r5, [pc, #256]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d127      	bne.n	8000cec <HAL_RCC_OscConfig+0x21c>
 8000c9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc6a 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ca8:	4d3b      	ldr	r5, [pc, #236]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000caa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cb2:	079b      	lsls	r3, r3, #30
 8000cb4:	d539      	bpl.n	8000d2a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f43f af1e 	beq.w	8000af8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cbc:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000cbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	e717      	b.n	8000af8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e7df      	b.n	8000c8c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fc52 	bl	800057c <HAL_GetTick>
 8000cd8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	05da      	lsls	r2, r3, #23
 8000cde:	d4d9      	bmi.n	8000c94 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce0:	f7ff fc4c 	bl	800057c <HAL_GetTick>
 8000ce4:	1bc0      	subs	r0, r0, r7
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	d9f7      	bls.n	8000cda <HAL_RCC_OscConfig+0x20a>
 8000cea:	e736      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cec:	2b05      	cmp	r3, #5
 8000cee:	d104      	bne.n	8000cfa <HAL_RCC_OscConfig+0x22a>
 8000cf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	672b      	str	r3, [r5, #112]	; 0x70
 8000cf8:	e7d0      	b.n	8000c9c <HAL_RCC_OscConfig+0x1cc>
 8000cfa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000cfc:	f022 0201 	bic.w	r2, r2, #1
 8000d00:	672a      	str	r2, [r5, #112]	; 0x70
 8000d02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d04:	f022 0204 	bic.w	r2, r2, #4
 8000d08:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ca      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000d0e:	f7ff fc35 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d12:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d16:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d1a:	0798      	lsls	r0, r3, #30
 8000d1c:	d5cb      	bpl.n	8000cb6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fc2d 	bl	800057c <HAL_GetTick>
 8000d22:	1bc0      	subs	r0, r0, r7
 8000d24:	4540      	cmp	r0, r8
 8000d26:	d9f7      	bls.n	8000d18 <HAL_RCC_OscConfig+0x248>
 8000d28:	e717      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff fc27 	bl	800057c <HAL_GetTick>
 8000d2e:	1bc0      	subs	r0, r0, r7
 8000d30:	4540      	cmp	r0, r8
 8000d32:	d9bd      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x1e0>
 8000d34:	e711      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d36:	4d18      	ldr	r5, [pc, #96]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
 8000d38:	68ab      	ldr	r3, [r5, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d047      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x302>
 8000d42:	4e19      	ldr	r6, [pc, #100]	; (8000da8 <HAL_RCC_OscConfig+0x2d8>)
 8000d44:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d46:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d48:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d4a:	d135      	bne.n	8000db8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fc16 	bl	800057c <HAL_GetTick>
 8000d50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	0199      	lsls	r1, r3, #6
 8000d56:	d429      	bmi.n	8000dac <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d58:	6a22      	ldr	r2, [r4, #32]
 8000d5a:	69e3      	ldr	r3, [r4, #28]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d6e:	0852      	lsrs	r2, r2, #1
 8000d70:	3a01      	subs	r2, #1
 8000d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d78:	2301      	movs	r3, #1
 8000d7a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fbfe 	bl	800057c <HAL_GetTick>
 8000d80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	019a      	lsls	r2, r3, #6
 8000d86:	f53f aebb 	bmi.w	8000b00 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8a:	f7ff fbf7 	bl	800057c <HAL_GetTick>
 8000d8e:	1b40      	subs	r0, r0, r5
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d9f6      	bls.n	8000d82 <HAL_RCC_OscConfig+0x2b2>
 8000d94:	e6e1      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	42470000 	.word	0x42470000
 8000da0:	42470e80 	.word	0x42470e80
 8000da4:	40007000 	.word	0x40007000
 8000da8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fbe6 	bl	800057c <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9cd      	bls.n	8000d52 <HAL_RCC_OscConfig+0x282>
 8000db6:	e6d0      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000db8:	f7ff fbe0 	bl	800057c <HAL_GetTick>
 8000dbc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	f57f ae9d 	bpl.w	8000b00 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc6:	f7ff fbd9 	bl	800057c <HAL_GetTick>
 8000dca:	1b00      	subs	r0, r0, r4
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f6      	bls.n	8000dbe <HAL_RCC_OscConfig+0x2ee>
 8000dd0:	e6c3      	b.n	8000b5a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dd2:	2801      	cmp	r0, #1
 8000dd4:	f43f aec2 	beq.w	8000b5c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000dd8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dda:	69e3      	ldr	r3, [r4, #28]
 8000ddc:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f47f ae79 	bne.w	8000ad8 <HAL_RCC_OscConfig+0x8>
 8000de6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000de8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f47f ae73 	bne.w	8000ad8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000df8:	4003      	ands	r3, r0
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	f47f ae6c 	bne.w	8000ad8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e02:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f47f ae66 	bne.w	8000ad8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000e0e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000e12:	1ac0      	subs	r0, r0, r3
 8000e14:	bf18      	it	ne
 8000e16:	2001      	movne	r0, #1
 8000e18:	e6a0      	b.n	8000b5c <HAL_RCC_OscConfig+0x8c>
 8000e1a:	bf00      	nop

08000e1c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e1c:	4913      	ldr	r1, [pc, #76]	; (8000e6c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e1e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e20:	688b      	ldr	r3, [r1, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d003      	beq.n	8000e32 <HAL_RCC_GetSysClockFreq+0x16>
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d003      	beq.n	8000e36 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e2e:	4810      	ldr	r0, [pc, #64]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e30:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e34:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e36:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e38:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e3a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e3c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e40:	bf14      	ite	ne
 8000e42:	480c      	ldrne	r0, [pc, #48]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e44:	480a      	ldreq	r0, [pc, #40]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e46:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e52:	fba1 0100 	umull	r0, r1, r1, r0
 8000e56:	f7ff f9bf 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_RCC_GetSysClockFreq+0x50>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e62:	3301      	adds	r3, #1
 8000e64:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e6a:	bd08      	pop	{r3, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	00f42400 	.word	0x00f42400
 8000e74:	007a1200 	.word	0x007a1200

08000e78 <HAL_RCC_ClockConfig>:
{
 8000e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e7e:	4604      	mov	r4, r0
 8000e80:	b910      	cbnz	r0, 8000e88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <HAL_RCC_ClockConfig+0x124>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f002 020f 	and.w	r2, r2, #15
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d329      	bcc.n	8000ee8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e94:	6821      	ldr	r1, [r4, #0]
 8000e96:	078f      	lsls	r7, r1, #30
 8000e98:	d42e      	bmi.n	8000ef8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e9a:	07c8      	lsls	r0, r1, #31
 8000e9c:	d441      	bmi.n	8000f22 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_RCC_ClockConfig+0x124>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f002 020f 	and.w	r2, r2, #15
 8000ea6:	4295      	cmp	r5, r2
 8000ea8:	d367      	bcc.n	8000f7a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eaa:	6822      	ldr	r2, [r4, #0]
 8000eac:	0751      	lsls	r1, r2, #29
 8000eae:	d46d      	bmi.n	8000f8c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eb0:	0713      	lsls	r3, r2, #28
 8000eb2:	d507      	bpl.n	8000ec4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
 8000eb6:	6921      	ldr	r1, [r4, #16]
 8000eb8:	6893      	ldr	r3, [r2, #8]
 8000eba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ebe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ec4:	f7ff ffaa 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <HAL_RCC_ClockConfig+0x12c>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	40d8      	lsrs	r0, r3
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_RCC_ClockConfig+0x130>)
 8000ed8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_RCC_ClockConfig+0x134>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f7ff fb03 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee8:	b2ca      	uxtb	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d1c5      	bne.n	8000e82 <HAL_RCC_ClockConfig+0xa>
 8000ef6:	e7cd      	b.n	8000e94 <HAL_RCC_ClockConfig+0x1c>
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000efe:	bf1e      	ittt	ne
 8000f00:	689a      	ldrne	r2, [r3, #8]
 8000f02:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f06:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f08:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f0a:	bf42      	ittt	mi
 8000f0c:	689a      	ldrmi	r2, [r3, #8]
 8000f0e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f12:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	68a0      	ldr	r0, [r4, #8]
 8000f18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f1c:	4302      	orrs	r2, r0
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	e7bb      	b.n	8000e9a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f22:	6862      	ldr	r2, [r4, #4]
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
 8000f26:	2a01      	cmp	r2, #1
 8000f28:	d11d      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	d0a7      	beq.n	8000e82 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f32:	4e1b      	ldr	r6, [pc, #108]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
 8000f34:	68b3      	ldr	r3, [r6, #8]
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fb1d 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f42:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f46:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f48:	68b3      	ldr	r3, [r6, #8]
 8000f4a:	6862      	ldr	r2, [r4, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f54:	d0a3      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f7ff fb11 	bl	800057c <HAL_GetTick>
 8000f5a:	1bc0      	subs	r0, r0, r7
 8000f5c:	4540      	cmp	r0, r8
 8000f5e:	d9f3      	bls.n	8000f48 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000f60:	2003      	movs	r0, #3
}
 8000f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f66:	1e91      	subs	r1, r2, #2
 8000f68:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f6c:	d802      	bhi.n	8000f74 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f72:	e7dd      	b.n	8000f30 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	f013 0f02 	tst.w	r3, #2
 8000f78:	e7da      	b.n	8000f30 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	b2ea      	uxtb	r2, r5
 8000f7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	429d      	cmp	r5, r3
 8000f86:	f47f af7c 	bne.w	8000e82 <HAL_RCC_ClockConfig+0xa>
 8000f8a:	e78e      	b.n	8000eaa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f8c:	4904      	ldr	r1, [pc, #16]	; (8000fa0 <HAL_RCC_ClockConfig+0x128>)
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	688b      	ldr	r3, [r1, #8]
 8000f92:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f96:	4303      	orrs	r3, r0
 8000f98:	608b      	str	r3, [r1, #8]
 8000f9a:	e789      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x38>
 8000f9c:	40023c00 	.word	0x40023c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	080018b8 	.word	0x080018b8
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fbe:	6810      	ldr	r0, [r2, #0]
}
 8000fc0:	40d8      	lsrs	r0, r3
 8000fc2:	4770      	bx	lr
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	080018c8 	.word	0x080018c8
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fde:	6810      	ldr	r0, [r2, #0]
}
 8000fe0:	40d8      	lsrs	r0, r3
 8000fe2:	4770      	bx	lr
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	080018c8 	.word	0x080018c8
 8000fec:	20000008 	.word	0x20000008

08000ff0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000ff0:	6803      	ldr	r3, [r0, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000ff8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001002:	2320      	movs	r3, #32
 8001004:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001008:	4770      	bx	lr
	...

0800100c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800100c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800100e:	6803      	ldr	r3, [r0, #0]
 8001010:	68c1      	ldr	r1, [r0, #12]
 8001012:	691a      	ldr	r2, [r3, #16]
{
 8001014:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001016:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800101a:	430a      	orrs	r2, r1
 800101c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800101e:	6925      	ldr	r5, [r4, #16]
 8001020:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001022:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001024:	69c0      	ldr	r0, [r0, #28]
 8001026:	432a      	orrs	r2, r5
 8001028:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800102a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800102e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001030:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001034:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	69a1      	ldr	r1, [r4, #24]
 800103e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001042:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001044:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800104c:	d129      	bne.n	80010a2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800104e:	4293      	cmp	r3, r2
 8001050:	d003      	beq.n	800105a <UART_SetConfig+0x4e>
 8001052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001056:	4293      	cmp	r3, r2
 8001058:	d120      	bne.n	800109c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800105a:	f7ff ffb9 	bl	8000fd0 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800105e:	6862      	ldr	r2, [r4, #4]
 8001060:	6825      	ldr	r5, [r4, #0]
 8001062:	1892      	adds	r2, r2, r2
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f04f 0119 	mov.w	r1, #25
 800106c:	415b      	adcs	r3, r3
 800106e:	fba0 0101 	umull	r0, r1, r0, r1
 8001072:	f7ff f8b1 	bl	80001d8 <__aeabi_uldivmod>
 8001076:	2164      	movs	r1, #100	; 0x64
 8001078:	fbb0 f4f1 	udiv	r4, r0, r1
 800107c:	fb01 0314 	mls	r3, r1, r4, r0
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	3332      	adds	r3, #50	; 0x32
 8001084:	fbb3 f3f1 	udiv	r3, r3, r1
 8001088:	f003 0207 	and.w	r2, r3, #7
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001092:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001096:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001098:	60ab      	str	r3, [r5, #8]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800109c:	f7ff ff88 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
 80010a0:	e7dd      	b.n	800105e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d002      	beq.n	80010ac <UART_SetConfig+0xa0>
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <UART_SetConfig+0xd8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d116      	bne.n	80010da <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80010ac:	f7ff ff90 	bl	8000fd0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	6825      	ldr	r5, [r4, #0]
 80010b4:	2119      	movs	r1, #25
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	fba0 0101 	umull	r0, r1, r0, r1
 80010bc:	0f9b      	lsrs	r3, r3, #30
 80010be:	f7ff f88b 	bl	80001d8 <__aeabi_uldivmod>
 80010c2:	2264      	movs	r2, #100	; 0x64
 80010c4:	fbb0 f1f2 	udiv	r1, r0, r2
 80010c8:	fb02 0311 	mls	r3, r2, r1, r0
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	3332      	adds	r3, #50	; 0x32
 80010d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80010d8:	e7de      	b.n	8001098 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80010da:	f7ff ff69 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
 80010de:	e7e7      	b.n	80010b0 <UART_SetConfig+0xa4>
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40011400 	.word	0x40011400

080010e8 <HAL_UART_Init>:
{
 80010e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80010ea:	4604      	mov	r4, r0
 80010ec:	b340      	cbz	r0, 8001140 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80010ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010f6:	b91b      	cbnz	r3, 8001100 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80010f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80010fc:	f000 fb18 	bl	8001730 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001100:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001102:	2324      	movs	r3, #36	; 0x24
 8001104:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001108:	68d3      	ldr	r3, [r2, #12]
 800110a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800110e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff ff7b 	bl	800100c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800111e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001126:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800112e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001130:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001132:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001134:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001136:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800113a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800113e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001140:	2001      	movs	r0, #1
}
 8001142:	bd10      	pop	{r4, pc}

08001144 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001144:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001148:	2b20      	cmp	r3, #32
 800114a:	d120      	bne.n	800118e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800114c:	b1e9      	cbz	r1, 800118a <HAL_UART_Receive_IT+0x46>
 800114e:	b1e2      	cbz	r2, 800118a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001150:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001154:	2b01      	cmp	r3, #1
 8001156:	d01a      	beq.n	800118e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001158:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800115a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800115c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800115e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001160:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001162:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001166:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001168:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800116a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800116c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001170:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001174:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001176:	6951      	ldr	r1, [r2, #20]
 8001178:	f041 0101 	orr.w	r1, r1, #1
 800117c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800117e:	68d1      	ldr	r1, [r2, #12]
 8001180:	f041 0120 	orr.w	r1, r1, #32
 8001184:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001186:	4618      	mov	r0, r3
 8001188:	4770      	bx	lr
      return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	4770      	bx	lr
    return HAL_BUSY;
 800118e:	2002      	movs	r0, #2
}
 8001190:	4770      	bx	lr

08001192 <HAL_UART_TxCpltCallback>:
 8001192:	4770      	bx	lr

08001194 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001194:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001198:	2b22      	cmp	r3, #34	; 0x22
{
 800119a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800119c:	d136      	bne.n	800120c <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800119e:	6883      	ldr	r3, [r0, #8]
 80011a0:	6901      	ldr	r1, [r0, #16]
 80011a2:	6802      	ldr	r2, [r0, #0]
 80011a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011aa:	d123      	bne.n	80011f4 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011ac:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011ae:	b9e9      	cbnz	r1, 80011ec <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011b4:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80011b8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80011ba:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80011bc:	3c01      	subs	r4, #1
 80011be:	b2a4      	uxth	r4, r4
 80011c0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80011c2:	b98c      	cbnz	r4, 80011e8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	f022 0220 	bic.w	r2, r2, #32
 80011cc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80011de:	2320      	movs	r3, #32
 80011e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80011e4:	f000 fa2e 	bl	8001644 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80011e8:	2000      	movs	r0, #0
}
 80011ea:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f823 2b01 	strh.w	r2, [r3], #1
 80011f2:	e7e1      	b.n	80011b8 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011f4:	b921      	cbnz	r1, 8001200 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	6852      	ldr	r2, [r2, #4]
 80011fa:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e7dc      	b.n	80011ba <UART_Receive_IT+0x26>
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	6281      	str	r1, [r0, #40]	; 0x28
 8001206:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800120a:	e7f7      	b.n	80011fc <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800120c:	2002      	movs	r0, #2
 800120e:	bd10      	pop	{r4, pc}

08001210 <HAL_UART_ErrorCallback>:
 8001210:	4770      	bx	lr
	...

08001214 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001214:	6803      	ldr	r3, [r0, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001218:	68d9      	ldr	r1, [r3, #12]
{
 800121a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800121c:	0716      	lsls	r6, r2, #28
{
 800121e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001220:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001222:	d107      	bne.n	8001234 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001224:	0696      	lsls	r6, r2, #26
 8001226:	d55c      	bpl.n	80012e2 <HAL_UART_IRQHandler+0xce>
 8001228:	068d      	lsls	r5, r1, #26
 800122a:	d55a      	bpl.n	80012e2 <HAL_UART_IRQHandler+0xce>
}
 800122c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001230:	f7ff bfb0 	b.w	8001194 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001234:	f015 0501 	ands.w	r5, r5, #1
 8001238:	d102      	bne.n	8001240 <HAL_UART_IRQHandler+0x2c>
 800123a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800123e:	d050      	beq.n	80012e2 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001240:	07d0      	lsls	r0, r2, #31
 8001242:	d505      	bpl.n	8001250 <HAL_UART_IRQHandler+0x3c>
 8001244:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001246:	bf42      	ittt	mi
 8001248:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800124a:	f043 0301 	orrmi.w	r3, r3, #1
 800124e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001250:	0756      	lsls	r6, r2, #29
 8001252:	d504      	bpl.n	800125e <HAL_UART_IRQHandler+0x4a>
 8001254:	b11d      	cbz	r5, 800125e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800125e:	0790      	lsls	r0, r2, #30
 8001260:	d504      	bpl.n	800126c <HAL_UART_IRQHandler+0x58>
 8001262:	b11d      	cbz	r5, 800126c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800126c:	0713      	lsls	r3, r2, #28
 800126e:	d506      	bpl.n	800127e <HAL_UART_IRQHandler+0x6a>
 8001270:	068e      	lsls	r6, r1, #26
 8001272:	d400      	bmi.n	8001276 <HAL_UART_IRQHandler+0x62>
 8001274:	b11d      	cbz	r5, 800127e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800127e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d066      	beq.n	8001352 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001284:	0695      	lsls	r5, r2, #26
 8001286:	d504      	bpl.n	8001292 <HAL_UART_IRQHandler+0x7e>
 8001288:	0688      	lsls	r0, r1, #26
 800128a:	d502      	bpl.n	8001292 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ff81 	bl	8001194 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001296:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001298:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800129a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800129c:	d402      	bmi.n	80012a4 <HAL_UART_IRQHandler+0x90>
 800129e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80012a2:	d01a      	beq.n	80012da <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80012a4:	f7ff fea4 	bl	8000ff0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	0652      	lsls	r2, r2, #25
 80012ae:	d510      	bpl.n	80012d2 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012b0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012b8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012ba:	b150      	cbz	r0, 80012d2 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_UART_IRQHandler+0x140>)
 80012be:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012c0:	f7ff f9e5 	bl	800068e <HAL_DMA_Abort_IT>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d044      	beq.n	8001352 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80012ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012d0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ff9c 	bl	8001210 <HAL_UART_ErrorCallback>
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80012da:	f7ff ff99 	bl	8001210 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012de:	63e5      	str	r5, [r4, #60]	; 0x3c
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012e2:	0616      	lsls	r6, r2, #24
 80012e4:	d527      	bpl.n	8001336 <HAL_UART_IRQHandler+0x122>
 80012e6:	060d      	lsls	r5, r1, #24
 80012e8:	d525      	bpl.n	8001336 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80012ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80012ee:	2a21      	cmp	r2, #33	; 0x21
 80012f0:	d12f      	bne.n	8001352 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f2:	68a2      	ldr	r2, [r4, #8]
 80012f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012f8:	6a22      	ldr	r2, [r4, #32]
 80012fa:	d117      	bne.n	800132c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80012fc:	8811      	ldrh	r1, [r2, #0]
 80012fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001302:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001304:	6921      	ldr	r1, [r4, #16]
 8001306:	b979      	cbnz	r1, 8001328 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001308:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800130a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800130c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800130e:	3a01      	subs	r2, #1
 8001310:	b292      	uxth	r2, r2
 8001312:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001314:	b9ea      	cbnz	r2, 8001352 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001328:	3201      	adds	r2, #1
 800132a:	e7ee      	b.n	800130a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800132c:	1c51      	adds	r1, r2, #1
 800132e:	6221      	str	r1, [r4, #32]
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	e7ea      	b.n	800130c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001336:	0650      	lsls	r0, r2, #25
 8001338:	d50b      	bpl.n	8001352 <HAL_UART_IRQHandler+0x13e>
 800133a:	064a      	lsls	r2, r1, #25
 800133c:	d509      	bpl.n	8001352 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001344:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001346:	2320      	movs	r3, #32
 8001348:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff ff20 	bl	8001192 <HAL_UART_TxCpltCallback>
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	08001359 	.word	0x08001359

08001358 <UART_DMAAbortOnError>:
{
 8001358:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001360:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001362:	f7ff ff55 	bl	8001210 <HAL_UART_ErrorCallback>
 8001366:	bd08      	pop	{r3, pc}

08001368 <MY_FLASH_SetSectorAddrs>:
}

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
	MY_SectorNum = sector;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <MY_FLASH_SetSectorAddrs+0xc>)
 800136a:	7018      	strb	r0, [r3, #0]
	MY_SectorAddrs = addrs;
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <MY_FLASH_SetSectorAddrs+0x10>)
 800136e:	6019      	str	r1, [r3, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000002c 	.word	0x2000002c
 8001378:	20000028 	.word	0x20000028

0800137c <char2hex>:
}

uint8_t char2hex(char c)
{

	switch (c)
 800137c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8001380:	2b05      	cmp	r3, #5
 8001382:	d80e      	bhi.n	80013a2 <char2hex+0x26>
 8001384:	e8df f003 	tbb	[pc, r3]
 8001388:	0507090b 	.word	0x0507090b
 800138c:	1003      	.short	0x1003
	{
	case 'F': return 15;break;
	case 'E': return 14;break;
 800138e:	200e      	movs	r0, #14
 8001390:	4770      	bx	lr
	case 'D': return 13;break;
 8001392:	200d      	movs	r0, #13
 8001394:	4770      	bx	lr
	case 'C': return 12;break;
 8001396:	200c      	movs	r0, #12
 8001398:	4770      	bx	lr
	case 'B': return 11;break;
 800139a:	200b      	movs	r0, #11
 800139c:	4770      	bx	lr
	case 'A': return 10;break;
 800139e:	200a      	movs	r0, #10
 80013a0:	4770      	bx	lr
	default : return c-'0';
 80013a2:	3830      	subs	r0, #48	; 0x30
 80013a4:	b2c0      	uxtb	r0, r0
 80013a6:	4770      	bx	lr
	case 'F': return 15;break;
 80013a8:	200f      	movs	r0, #15
	}

}
 80013aa:	4770      	bx	lr

080013ac <getAddress>:

uint32_t getAddress(char *pData)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
	uint16_t j;
	uint32_t ret=0;
 80013ae:	2100      	movs	r1, #0
{
 80013b0:	4606      	mov	r6, r0
 80013b2:	1d04      	adds	r4, r0, #4
	uint32_t expo=1;
 80013b4:	2501      	movs	r5, #1
	for(j=0;j<4;j++){
		ret+=(uint32_t)char2hex(pData[3-j])*expo;
 80013b6:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80013ba:	f7ff ffdf 	bl	800137c <char2hex>
	for(j=0;j<4;j++){
 80013be:	42a6      	cmp	r6, r4
		ret+=(uint32_t)char2hex(pData[3-j])*expo;
 80013c0:	fb05 1100 	mla	r1, r5, r0, r1
		expo*=16;
 80013c4:	ea4f 1505 	mov.w	r5, r5, lsl #4
	for(j=0;j<4;j++){
 80013c8:	d1f5      	bne.n	80013b6 <getAddress+0xa>
	}
	return ret;
}
 80013ca:	4608      	mov	r0, r1
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080013d0 <Process_HexLine>:
{
 80013d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d4:	4606      	mov	r6, r0
	record_length=(uint8_t)(char2hex(pData[1])*16+char2hex(pData[2]));
 80013d6:	7840      	ldrb	r0, [r0, #1]
 80013d8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800146c <Process_HexLine+0x9c>
	for(i=0;i<(uint16_t)record_length<<1;i++)
 80013dc:	4f20      	ldr	r7, [pc, #128]	; (8001460 <Process_HexLine+0x90>)
		data[i]=(uint8_t)(char2hex(pData[2*i+9])*16+char2hex(pData[2*i+9+1]));
 80013de:	f8df b088 	ldr.w	fp, [pc, #136]	; 8001468 <Process_HexLine+0x98>
	record_length=(uint8_t)(char2hex(pData[1])*16+char2hex(pData[2]));
 80013e2:	f7ff ffcb 	bl	800137c <char2hex>
 80013e6:	4605      	mov	r5, r0
 80013e8:	78b0      	ldrb	r0, [r6, #2]
 80013ea:	f7ff ffc7 	bl	800137c <char2hex>
 80013ee:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80013f2:	b2ed      	uxtb	r5, r5
	address = getAddress(&pData[3]);
 80013f4:	1cf0      	adds	r0, r6, #3
	record_length=(uint8_t)(char2hex(pData[1])*16+char2hex(pData[2]));
 80013f6:	f888 5000 	strb.w	r5, [r8]
	address = getAddress(&pData[3]);
 80013fa:	f7ff ffd7 	bl	80013ac <getAddress>
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <Process_HexLine+0x94>)
 8001400:	6018      	str	r0, [r3, #0]
	for(i=0;i<(uint16_t)record_length<<1;i++)
 8001402:	2300      	movs	r3, #0
	address = getAddress(&pData[3]);
 8001404:	4604      	mov	r4, r0
	for(i=0;i<(uint16_t)record_length<<1;i++)
 8001406:	803b      	strh	r3, [r7, #0]
 8001408:	006d      	lsls	r5, r5, #1
 800140a:	8839      	ldrh	r1, [r7, #0]
 800140c:	42a9      	cmp	r1, r5
 800140e:	db0b      	blt.n	8001428 <Process_HexLine+0x58>
	uint32_t flashAddress = APP_START_ADDRESS + address;
 8001410:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)data)[i]);
 8001414:	4e14      	ldr	r6, [pc, #80]	; (8001468 <Process_HexLine+0x98>)
	uint32_t flashAddress = APP_START_ADDRESS + address;
 8001416:	f504 24c0 	add.w	r4, r4, #393216	; 0x60000
	for(uint32_t i=0; i<record_length; i++)
 800141a:	2500      	movs	r5, #0
 800141c:	f898 3000 	ldrb.w	r3, [r8]
 8001420:	429d      	cmp	r5, r3
 8001422:	d313      	bcc.n	800144c <Process_HexLine+0x7c>
}
 8001424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data[i]=(uint8_t)(char2hex(pData[2*i+9])*16+char2hex(pData[2*i+9+1]));
 8001428:	eb06 0a41 	add.w	sl, r6, r1, lsl #1
 800142c:	f89a 0009 	ldrb.w	r0, [sl, #9]
 8001430:	f7ff ffa4 	bl	800137c <char2hex>
 8001434:	4681      	mov	r9, r0
 8001436:	f89a 000a 	ldrb.w	r0, [sl, #10]
 800143a:	f7ff ff9f 	bl	800137c <char2hex>
 800143e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 8001442:	f80b 0001 	strb.w	r0, [fp, r1]
	for(i=0;i<(uint16_t)record_length<<1;i++)
 8001446:	3101      	adds	r1, #1
 8001448:	8039      	strh	r1, [r7, #0]
 800144a:	e7de      	b.n	800140a <Process_HexLine+0x3a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)data)[i]);
 800144c:	5d72      	ldrb	r2, [r6, r5]
 800144e:	4621      	mov	r1, r4
 8001450:	2300      	movs	r3, #0
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff f9f4 	bl	8000840 <HAL_FLASH_Program>
		flashAddress++;
 8001458:	3401      	adds	r4, #1
	for(uint32_t i=0; i<record_length; i++)
 800145a:	3501      	adds	r5, #1
 800145c:	e7de      	b.n	800141c <Process_HexLine+0x4c>
 800145e:	bf00      	nop
 8001460:	20000060 	.word	0x20000060
 8001464:	20000058 	.word	0x20000058
 8001468:	20002b82 	.word	0x20002b82
 800146c:	200000ac 	.word	0x200000ac

08001470 <JumpToBootloader>:


void JumpToBootloader(void) {


    appStack = (uint32_t) *((__IO uint32_t*)APP_START_ADDRESS);
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <JumpToBootloader+0x1c>)
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <JumpToBootloader+0x20>)
 8001474:	680a      	ldr	r2, [r1, #0]
 8001476:	601a      	str	r2, [r3, #0]

    appEntry = (pFunction) *(__IO uint32_t*) (APP_START_ADDRESS + 4);
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <JumpToBootloader+0x24>)
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <JumpToBootloader+0x28>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6003      	str	r3, [r0, #0]

    SCB->VTOR = APP_START_ADDRESS;
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <JumpToBootloader+0x2c>)
 8001482:	6081      	str	r1, [r0, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001484:	f382 8808 	msr	MSP, r2

    __set_MSP(appStack);

    appEntry();
 8001488:	4718      	bx	r3
 800148a:	bf00      	nop
 800148c:	08060000 	.word	0x08060000
 8001490:	20000064 	.word	0x20000064
 8001494:	08060004 	.word	0x08060004
 8001498:	2000005c 	.word	0x2000005c
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD,LED3_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	4801      	ldr	r0, [pc, #4]	; (80014ac <Error_Handler+0xc>)
 80014a8:	f7ff bb06 	b.w	8000ab8 <HAL_GPIO_WritePin>
 80014ac:	40020c00 	.word	0x40020c00

080014b0 <SystemClock_Config>:
{
 80014b0:	b510      	push	{r4, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b4:	2230      	movs	r2, #48	; 0x30
 80014b6:	2100      	movs	r1, #0
 80014b8:	a808      	add	r0, sp, #32
 80014ba:	f000 f9e9 	bl	8001890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014be:	2214      	movs	r2, #20
 80014c0:	2100      	movs	r1, #0
 80014c2:	a803      	add	r0, sp, #12
 80014c4:	f000 f9e4 	bl	8001890 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2400      	movs	r4, #0
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <SystemClock_Config+0x84>)
 80014cc:	9401      	str	r4, [sp, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <SystemClock_Config+0x88>)
 80014e2:	9402      	str	r4, [sp, #8]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ee:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001502:	2310      	movs	r3, #16
 8001504:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f7ff fae3 	bl	8000ad0 <HAL_RCC_OscConfig>
 800150a:	b108      	cbz	r0, 8001510 <SystemClock_Config+0x60>
    Error_Handler();
 800150c:	f7ff ffc8 	bl	80014a0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800151a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800151c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001520:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001524:	f7ff fca8 	bl	8000e78 <HAL_RCC_ClockConfig>
 8001528:	b108      	cbz	r0, 800152e <SystemClock_Config+0x7e>
    Error_Handler();
 800152a:	f7ff ffb9 	bl	80014a0 <Error_Handler>
}
 800152e:	b014      	add	sp, #80	; 0x50
 8001530:	bd10      	pop	{r4, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <boot_main>:
{
 800153c:	b500      	push	{lr}
	a=0x08060000;
 800153e:	4a37      	ldr	r2, [pc, #220]	; (800161c <boot_main+0xe0>)
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <boot_main+0xe4>)
 8001542:	6013      	str	r3, [r2, #0]
	val=a[0];
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <boot_main+0xe8>)
{
 8001548:	b089      	sub	sp, #36	; 0x24
	val=a[0];
 800154a:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 800154c:	f7fe fff0 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001550:	f7ff ffae 	bl	80014b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	2214      	movs	r2, #20
 8001556:	2100      	movs	r1, #0
 8001558:	a803      	add	r0, sp, #12
 800155a:	f000 f999 	bl	8001890 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2400      	movs	r4, #0
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <boot_main+0xec>)
 8001562:	9400      	str	r4, [sp, #0]
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 8001566:	4831      	ldr	r0, [pc, #196]	; (800162c <boot_main+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	9401      	str	r4, [sp, #4]
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f042 0208 	orr.w	r2, r2, #8
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f002 0208 	and.w	r2, r2, #8
 8001588:	9201      	str	r2, [sp, #4]
 800158a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	9402      	str	r4, [sp, #8]
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800159c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 80015a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 80015a6:	f7ff fa87 	bl	8000ab8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin;
 80015aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015ae:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <boot_main+0xf0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f7ff f9ae 	bl	800091c <HAL_GPIO_Init>
  huart1.Instance = USART1;
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <boot_main+0xf4>)
  huart1.Init.BaudRate = 9600;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <boot_main+0xf8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c4:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80015c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80015ca:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ce:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d0:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015da:	f7ff fd85 	bl	80010e8 <HAL_UART_Init>
 80015de:	b108      	cbz	r0, 80015e4 <boot_main+0xa8>
    Error_Handler();
 80015e0:	f7ff ff5e 	bl	80014a0 <Error_Handler>
  if (HAL_UART_Receive_IT(&huart1, (uint8_t *)RxBuffer[length], RxBufferSIZE)!=HAL_OK)
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <boot_main+0xfc>)
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <boot_main+0xf4>)
 80015e8:	8819      	ldrh	r1, [r3, #0]
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <boot_main+0x100>)
 80015ec:	222b      	movs	r2, #43	; 0x2b
 80015ee:	fb02 3101 	mla	r1, r2, r1, r3
 80015f2:	f7ff fda7 	bl	8001144 <HAL_UART_Receive_IT>
 80015f6:	b108      	cbz	r0, 80015fc <boot_main+0xc0>
	  Error_Handler();
 80015f8:	f7ff ff52 	bl	80014a0 <Error_Handler>
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 80015fc:	4d0b      	ldr	r5, [pc, #44]	; (800162c <boot_main+0xf0>)
	  if (application_state==1){
 80015fe:	4c10      	ldr	r4, [pc, #64]	; (8001640 <boot_main+0x104>)
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	4628      	mov	r0, r5
 8001606:	f7ff fa5c 	bl	8000ac2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800160a:	2064      	movs	r0, #100	; 0x64
 800160c:	f7fe ffbc 	bl	8000588 <HAL_Delay>
	  if (application_state==1){
 8001610:	7823      	ldrb	r3, [r4, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d1f4      	bne.n	8001600 <boot_main+0xc4>
			JumpToBootloader();
 8001616:	f7ff ff2b 	bl	8001470 <JumpToBootloader>
 800161a:	e7f1      	b.n	8001600 <boot_main+0xc4>
 800161c:	20002b94 	.word	0x20002b94
 8001620:	08060000 	.word	0x08060000
 8001624:	20000068 	.word	0x20000068
 8001628:	40023800 	.word	0x40023800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	2000006c 	.word	0x2000006c
 8001634:	40011000 	.word	0x40011000
 8001638:	20000030 	.word	0x20000030
 800163c:	200000ad 	.word	0x200000ad
 8001640:	2000002d 	.word	0x2000002d

08001644 <HAL_UART_RxCpltCallback>:
{
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == USART1){
 8001646:	6802      	ldr	r2, [r0, #0]
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_UART_RxCpltCallback+0x90>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d133      	bne.n	80016b6 <HAL_UART_RxCpltCallback+0x72>
		if (RxBuffer[length][7]=='0'&&RxBuffer[length][8]=='0'){
 800164e:	4822      	ldr	r0, [pc, #136]	; (80016d8 <HAL_UART_RxCpltCallback+0x94>)
 8001650:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_UART_RxCpltCallback+0x98>)
 8001652:	8803      	ldrh	r3, [r0, #0]
 8001654:	272b      	movs	r7, #43	; 0x2b
 8001656:	fb07 1203 	mla	r2, r7, r3, r1
 800165a:	4605      	mov	r5, r0
 800165c:	79d4      	ldrb	r4, [r2, #7]
 800165e:	2c30      	cmp	r4, #48	; 0x30
 8001660:	460e      	mov	r6, r1
 8001662:	d128      	bne.n	80016b6 <HAL_UART_RxCpltCallback+0x72>
 8001664:	7a12      	ldrb	r2, [r2, #8]
 8001666:	2a30      	cmp	r2, #48	; 0x30
 8001668:	d10d      	bne.n	8001686 <HAL_UART_RxCpltCallback+0x42>
			length++;
 800166a:	3301      	adds	r3, #1
 800166c:	b29b      	uxth	r3, r3
 800166e:	8003      	strh	r3, [r0, #0]
			if (HAL_UART_Receive_IT(&huart1, (uint8_t *)RxBuffer[length], RxBufferSIZE)!=HAL_OK)
 8001670:	463a      	mov	r2, r7
 8001672:	fb07 1103 	mla	r1, r7, r3, r1
 8001676:	481a      	ldr	r0, [pc, #104]	; (80016e0 <HAL_UART_RxCpltCallback+0x9c>)
 8001678:	f7ff fd64 	bl	8001144 <HAL_UART_Receive_IT>
 800167c:	b1d8      	cbz	r0, 80016b6 <HAL_UART_RxCpltCallback+0x72>
}
 800167e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				Error_Handler();
 8001682:	f7ff bf0d 	b.w	80014a0 <Error_Handler>
		else if (RxBuffer[length][7]=='0'&&RxBuffer[length][8]=='1'){
 8001686:	2a31      	cmp	r2, #49	; 0x31
 8001688:	d115      	bne.n	80016b6 <HAL_UART_RxCpltCallback+0x72>
				MY_FLASH_SetSectorAddrs(SECTOR_NUM, APP_START_ADDRESS);
 800168a:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_UART_RxCpltCallback+0xa0>)
				for(cpt=0;cpt<length;cpt++){
 800168c:	4c16      	ldr	r4, [pc, #88]	; (80016e8 <HAL_UART_RxCpltCallback+0xa4>)
				MY_FLASH_SetSectorAddrs(SECTOR_NUM, APP_START_ADDRESS);
 800168e:	2007      	movs	r0, #7
 8001690:	f7ff fe6a 	bl	8001368 <MY_FLASH_SetSectorAddrs>
				HAL_FLASH_Unlock();
 8001694:	f7ff f88e 	bl	80007b4 <HAL_FLASH_Unlock>
				FLASH_Erase_Sector(SECTOR_NUM, FLASH_VOLTAGE_RANGE_3);
 8001698:	2102      	movs	r1, #2
 800169a:	2007      	movs	r0, #7
 800169c:	f7ff f918 	bl	80008d0 <FLASH_Erase_Sector>
				for(cpt=0;cpt<length;cpt++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	8023      	strh	r3, [r4, #0]
 80016a4:	8820      	ldrh	r0, [r4, #0]
 80016a6:	882b      	ldrh	r3, [r5, #0]
 80016a8:	4283      	cmp	r3, r0
 80016aa:	d805      	bhi.n	80016b8 <HAL_UART_RxCpltCallback+0x74>
				HAL_FLASH_Lock();
 80016ac:	f7ff f894 	bl	80007d8 <HAL_FLASH_Lock>
				application_state=1;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_UART_RxCpltCallback+0xa8>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (RxBuffer[cpt][7]=='0'&&RxBuffer[cpt][8]=='0'){
 80016b8:	fb07 6000 	mla	r0, r7, r0, r6
 80016bc:	79c3      	ldrb	r3, [r0, #7]
 80016be:	2b30      	cmp	r3, #48	; 0x30
 80016c0:	d105      	bne.n	80016ce <HAL_UART_RxCpltCallback+0x8a>
 80016c2:	7a03      	ldrb	r3, [r0, #8]
 80016c4:	2b30      	cmp	r3, #48	; 0x30
 80016c6:	d102      	bne.n	80016ce <HAL_UART_RxCpltCallback+0x8a>
						Process_HexLine(RxBuffer[cpt],RxBufferSIZE);
 80016c8:	212b      	movs	r1, #43	; 0x2b
 80016ca:	f7ff fe81 	bl	80013d0 <Process_HexLine>
				for(cpt=0;cpt<length;cpt++){
 80016ce:	8823      	ldrh	r3, [r4, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	e7e6      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x5e>
 80016d4:	40011000 	.word	0x40011000
 80016d8:	20000030 	.word	0x20000030
 80016dc:	200000ad 	.word	0x200000ad
 80016e0:	2000006c 	.word	0x2000006c
 80016e4:	08060000 	.word	0x08060000
 80016e8:	2000002e 	.word	0x2000002e
 80016ec:	2000002d 	.word	0x2000002d

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_MspInit+0x3c>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	9100      	str	r1, [sp, #0]
 80016f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001702:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	9101      	str	r1, [sp, #4]
 800170c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800171c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001720:	f7fe ff46 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001724:	b003      	add	sp, #12
 8001726:	f85d fb04 	ldr.w	pc, [sp], #4
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b510      	push	{r4, lr}
 8001732:	4604      	mov	r4, r0
 8001734:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	2214      	movs	r2, #20
 8001738:	2100      	movs	r1, #0
 800173a:	a803      	add	r0, sp, #12
 800173c:	f000 f8a8 	bl	8001890 <memset>
  if(huart->Instance==USART1)
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x74>)
 8001744:	429a      	cmp	r2, r3
 8001746:	d12b      	bne.n	80017a0 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001748:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800174c:	2400      	movs	r4, #0
 800174e:	9401      	str	r4, [sp, #4]
 8001750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	4815      	ldr	r0, [pc, #84]	; (80017a8 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	f042 0210 	orr.w	r2, r2, #16
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
 800175a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800175c:	f002 0210 	and.w	r2, r2, #16
 8001760:	9201      	str	r2, [sp, #4]
 8001762:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	9402      	str	r4, [sp, #8]
 8001766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001778:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800177c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001788:	2307      	movs	r3, #7
 800178a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f7ff f8c6 	bl	800091c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001790:	2025      	movs	r0, #37	; 0x25
 8001792:	4622      	mov	r2, r4
 8001794:	4621      	mov	r1, r4
 8001796:	f7fe ff1d 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800179a:	2025      	movs	r0, #37	; 0x25
 800179c:	f7fe ff4e 	bl	800063c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a0:	b008      	add	sp, #32
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40020000 	.word	0x40020000

080017ac <NMI_Handler>:
 80017ac:	4770      	bx	lr

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler>

080017b6 <SVC_Handler>:
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f7fe fed1 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80017c6:	f7fe bf5e 	b.w	8000686 <HAL_SYSTICK_IRQHandler>
	...

080017cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4801      	ldr	r0, [pc, #4]	; (80017d4 <USART1_IRQHandler+0x8>)
 80017ce:	f7ff bd21 	b.w	8001214 <HAL_UART_IRQHandler>
 80017d2:	bf00      	nop
 80017d4:	2000006c 	.word	0x2000006c

080017d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SystemInit+0x18>)
 80017da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017fa:	e003      	b.n	8001804 <LoopCopyDataInit>

080017fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001802:	3104      	adds	r1, #4

08001804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800180c:	d3f6      	bcc.n	80017fc <CopyDataInit>
  ldr  r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001810:	e002      	b.n	8001818 <LoopFillZerobss>

08001812 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001812:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001814:	f842 3b04 	str.w	r3, [r2], #4

08001818 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800181a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800181c:	d3f9      	bcc.n	8001812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffdb 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f000 f811 	bl	8001848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 8001826:	f7ff fe89 	bl	800153c <boot_main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800182c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001830:	080018e0 	.word	0x080018e0
  ldr  r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001838:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800183c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001840:	20002b98 	.word	0x20002b98

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <__libc_init_array>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4e0d      	ldr	r6, [pc, #52]	; (8001880 <__libc_init_array+0x38>)
 800184c:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <__libc_init_array+0x3c>)
 800184e:	1ba4      	subs	r4, r4, r6
 8001850:	10a4      	asrs	r4, r4, #2
 8001852:	2500      	movs	r5, #0
 8001854:	42a5      	cmp	r5, r4
 8001856:	d109      	bne.n	800186c <__libc_init_array+0x24>
 8001858:	4e0b      	ldr	r6, [pc, #44]	; (8001888 <__libc_init_array+0x40>)
 800185a:	4c0c      	ldr	r4, [pc, #48]	; (800188c <__libc_init_array+0x44>)
 800185c:	f000 f820 	bl	80018a0 <_init>
 8001860:	1ba4      	subs	r4, r4, r6
 8001862:	10a4      	asrs	r4, r4, #2
 8001864:	2500      	movs	r5, #0
 8001866:	42a5      	cmp	r5, r4
 8001868:	d105      	bne.n	8001876 <__libc_init_array+0x2e>
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001870:	4798      	blx	r3
 8001872:	3501      	adds	r5, #1
 8001874:	e7ee      	b.n	8001854 <__libc_init_array+0xc>
 8001876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800187a:	4798      	blx	r3
 800187c:	3501      	adds	r5, #1
 800187e:	e7f2      	b.n	8001866 <__libc_init_array+0x1e>
 8001880:	080018d8 	.word	0x080018d8
 8001884:	080018d8 	.word	0x080018d8
 8001888:	080018d8 	.word	0x080018d8
 800188c:	080018dc 	.word	0x080018dc

08001890 <memset>:
 8001890:	4402      	add	r2, r0
 8001892:	4603      	mov	r3, r0
 8001894:	4293      	cmp	r3, r2
 8001896:	d100      	bne.n	800189a <memset+0xa>
 8001898:	4770      	bx	lr
 800189a:	f803 1b01 	strb.w	r1, [r3], #1
 800189e:	e7f9      	b.n	8001894 <memset+0x4>

080018a0 <_init>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	bf00      	nop
 80018a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a6:	bc08      	pop	{r3}
 80018a8:	469e      	mov	lr, r3
 80018aa:	4770      	bx	lr

080018ac <_fini>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	bf00      	nop
 80018b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b2:	bc08      	pop	{r3}
 80018b4:	469e      	mov	lr, r3
 80018b6:	4770      	bx	lr
